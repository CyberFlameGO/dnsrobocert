jobs:
  - job: test
    strategy:
      matrix:
        macos-py37:
          IMAGE_NAME: macOS-1015
          PYTHON_VERSION: 3.7
          TOXENV: py37
        macos-py310:
          IMAGE_NAME: macOS-1015
          PYTHON_VERSION: 3.10
          TOXENV: py310
        windows-py37:
          IMAGE_NAME: windows-2019
          PYTHON_VERSION: 3.7
          TOXENV: py37
        windows-py310:
          IMAGE_NAME: windows-2019
          PYTHON_VERSION: 3.10
          TOXENV: py310
        linux-py37:
          IMAGE_NAME: ubuntu-18.04
          PYTHON_VERSION: 3.7
          TOXENV: py37
        linux-py310-cover:
          IMAGE_NAME: ubuntu-18.04
          PYTHON_VERSION: 3.10
          TOXENV: py310-cover
    pool:
      vmImage: $(IMAGE_NAME)
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: $(PYTHON_VERSION)
          addToPath: true
        displayName: Install Python
      - script: |
          set -e
          python -m pip install -U pip
          pip install poetry tox
        displayName: Prepare environment
      - script: |
          set -e
          tox
        displayName: Run tox env(s)
      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          testRunTitle: 'Publish test results for Python $(PYTHON_VERSION) on $(IMAGE_NAME)'
        displayName: Publish tests reports
      - task: PublishCodeCoverageResults@1
        condition: endsWith(variables['TOXENV'], '-cover')
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
        displayName: Publish coverage reports

  - job: docker
    pool:
      vmImage: ubuntu-18.04
    steps:
      - checkout: self
        lfs: true
      - script: |
          set -e
          docker build --tag adferrand/dnsrobocert:temp .
        displayName: Build Docker image
      - script: |
          set -e
          mkdir -p ./bin
          curl -fsSL https://goss.rocks/install | GOSS_DST=./bin sh
          GOSS_PATH=./bin/goss GOSS_SLEEP=5 GOSS_FILES_PATH=./test/goss ./bin/dgoss run adferrand/dnsrobocert:temp
        displayName: Check Docker container runtime

  - job: quality
    strategy:
      matrix:
        flake8:
          TOXENV: flake8
        mypy:
          TOXENV: mypy
    pool:
      vmImage: ubuntu-18.04
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: 3.10
          addToPath: true
        displayName: Install Python
      - script: |
          set -e
          python -m pip install -U pip
          pip install poetry tox
        displayName: Prepare environment
      - script: |
          set -e
          tox
        displayName: Run tox env(s)
